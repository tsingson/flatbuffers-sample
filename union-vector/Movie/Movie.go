// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Movie

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

// MovieT native go object
type MovieT struct {
	Single   *CharacterT
	Multiple []*CharacterT
}

// MovieT object pack function
func (t *MovieT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	singleOffset := t.Single.Pack(builder)

	// vector of unions
	multipleOffset := flatbuffers.UOffsetT(0)
	multipleTypeOffset := flatbuffers.UOffsetT(0)
	if t.Multiple != nil {
		multipleLength := len(t.Multiple)
		MovieStartMultipleTypeVector(builder, multipleLength)
		for j := multipleLength - 1; j >= 0; j-- {
			builder.PrependByte(byte(t.Multiple[j].Type))
		}
		multipleTypeOffset = MovieEndMultipleTypeVector(builder, multipleLength)

		// vector array
		multipleOffsets := make([]flatbuffers.UOffsetT, multipleLength)
		for j := multipleLength - 1; j >= 0; j-- {
			multipleOffsets[j] = t.Multiple[j].Pack(builder)
		}
		MovieStartMultipleVector(builder, multipleLength)
		for j := multipleLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(multipleOffsets[j])
		}
		multipleOffset = MovieEndMultipleVector(builder, multipleLength)
	}

	MovieStart(builder)
	if t.Single != nil {
		MovieAddSingleType(builder, t.Single.Type)
	}
	MovieAddSingle(builder, singleOffset)
	MovieAddMultipleType(builder, multipleTypeOffset)
	MovieAddMultiple(builder, multipleOffset)
	return MovieEnd(builder)
}

// MovieT object unpack function
func (rcv *Movie) UnPackTo(t *MovieT) {
	singleTable := flatbuffers.Table{}
	if rcv.Single(&singleTable) {
		t.Single = rcv.SingleType().UnPack(singleTable)
	}
	multipleLength := rcv.MultipleLength()
	t.Multiple = make([]*CharacterT, multipleLength)
	for j := 0; j < multipleLength; j++ {
		MultipleType := rcv.MultipleType(j)
		MultipleTable := flatbuffers.Table{}
		if rcv.Multiple(j, &MultipleTable) {
			t.Multiple[j] = MultipleType.UnPackVector(MultipleTable)
		}
	}
}

func (rcv *Movie) UnPack() *MovieT {
	if rcv == nil {
		return nil
	}
	t := &MovieT{}
	rcv.UnPackTo(t)
	return t
}

type Movie struct {
	_tab flatbuffers.Table
}

// GetRootAsMovie shortcut to access root table
func GetRootAsMovie(buf []byte, offset flatbuffers.UOffsetT) *Movie {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Movie{}
	x.Init(buf, n+offset)
	return x
}

// GetTableVectorAsMovie shortcut to access table in vector of  unions
func GetTableVectorAsMovie(table *flatbuffers.Table) *Movie {
	n := flatbuffers.GetUOffsetT(table.Bytes[table.Pos:])
	x := &Movie{}
	x.Init(table.Bytes, n+table.Pos)
	return x
}

// GetTableAsMovie shortcut to access table in single union field
func GetTableAsMovie(table *flatbuffers.Table) *Movie {
	x := &Movie{}
	x.Init(table.Bytes, table.Pos)
	return x
}

func (rcv *Movie) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Movie) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Movie) SingleType() Character {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return Character(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Movie) MutateSingleType(n Character) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *Movie) Single(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func (rcv *Movie) MultipleTypeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Movie) MultipleType(j int) Character {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return Character(rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1)))
	}
	return 0
}

func (rcv *Movie) MutateMultipleType(j int, n Character) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), byte(n))
	}
	return false
}

func (rcv *Movie) MultipleLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Movie) Multiple(j int, obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		obj.Pos = a + flatbuffers.UOffsetT(j*4)
		obj.Bytes = rcv._tab.Bytes
		return true
	}
	return false
}

func MovieStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}

func MovieAddSingleType(builder *flatbuffers.Builder, singleType Character) {
	builder.PrependByteSlot(0, byte(singleType), 0)
}

func MovieAddSingle(builder *flatbuffers.Builder, single flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(single), 0)
}

func MovieStartMultipleTypeVector(builder *flatbuffers.Builder, numElems int) {
	builder.StartVector(1, numElems, 1)
}

func MovieEndMultipleTypeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.EndVector(numElems)
}

func MovieAddMultipleType(builder *flatbuffers.Builder, multipleType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(multipleType), 0)
}

func MovieStartMultipleVector(builder *flatbuffers.Builder, numElems int) {
	builder.StartVector(4, numElems, 4)
}

func MovieEndMultipleVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.EndVector(numElems)
}

func MovieAddMultiple(builder *flatbuffers.Builder, multiple flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(multiple), 0)
}

func MovieEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
