// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Movie

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

// AttackerT native go object
type AttackerT struct {
	SwordAttackDamage int32
}

// AttackerT object pack function
func (t *AttackerT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}

	AttackerStart(builder)
	AttackerAddSwordAttackDamage(builder, t.SwordAttackDamage)
	return AttackerEnd(builder)
}

// AttackerT object unpack function
func (rcv *Attacker) UnPackTo(t *AttackerT) {
	t.SwordAttackDamage = rcv.SwordAttackDamage()
}

func (rcv *Attacker) UnPack() *AttackerT {
	if rcv == nil {
		return nil
	}
	t := &AttackerT{}
	rcv.UnPackTo(t)
	return t
}

type Attacker struct {
	_tab flatbuffers.Table
}

// GetRootAsAttacker shortcut to access root table
func GetRootAsAttacker(buf []byte, offset flatbuffers.UOffsetT) *Attacker {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Attacker{}
	x.Init(buf, n+offset)
	return x
}

// GetTableVectorAsAttacker shortcut to access table in vector of  unions
func GetTableVectorAsAttacker(table *flatbuffers.Table) *Attacker {
	n := flatbuffers.GetUOffsetT(table.Bytes[table.Pos:])
	x := &Attacker{}
	x.Init(table.Bytes, n+table.Pos)
	return x
}

// GetTableAsAttacker shortcut to access table in single union field
func GetTableAsAttacker(table *flatbuffers.Table) *Attacker {
	x := &Attacker{}
	x.Init(table.Bytes, table.Pos)
	return x
}

func (rcv *Attacker) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Attacker) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Attacker) SwordAttackDamage() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Attacker) MutateSwordAttackDamage(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func AttackerStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}

func AttackerAddSwordAttackDamage(builder *flatbuffers.Builder, swordAttackDamage int32) {
	builder.PrependInt32Slot(0, swordAttackDamage, 0)
}

func AttackerEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
