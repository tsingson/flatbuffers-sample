// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Movie

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

// BookReaderT native go object
type BookReaderT struct {
	BooksRead int32
}

func (t *BookReaderT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	return CreateBookReader(builder, t.BooksRead)
}

func (rcv *BookReader) UnPackTo(t *BookReaderT) {
	t.BooksRead = rcv.BooksRead()
}

func (rcv *BookReader) UnPack() *BookReaderT {
	if rcv == nil {
		return nil
	}
	t := &BookReaderT{}
	rcv.UnPackTo(t)
	return t
}

type BookReader struct {
	_tab flatbuffers.Struct
}

// GetStructVectorAsBookReader shortcut to access struct in vector of unions
func GetStructVectorAsBookReader(table *flatbuffers.Table) *BookReader {
	n := flatbuffers.GetUOffsetT(table.Bytes[table.Pos:])
	x := &BookReader{}
	x.Init(table.Bytes, n+table.Pos)
	return x
}

// GetStructAsBookReader shortcut to access struct in single union field
func GetStructAsBookReader(table *flatbuffers.Table) *BookReader {
	x := &BookReader{}
	x.Init(table.Bytes, table.Pos)
	return x
}

func (rcv *BookReader) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BookReader) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *BookReader) BooksRead() int32 {
	return rcv._tab.GetInt32(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}

func (rcv *BookReader) MutateBooksRead(n int32) bool {
	return rcv._tab.MutateInt32(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func CreateBookReader(builder *flatbuffers.Builder, booksRead int32) flatbuffers.UOffsetT {
	builder.Prep(4, 4)
	// offset: 0
	builder.PrependInt32(booksRead)
	return builder.Offset()
}
