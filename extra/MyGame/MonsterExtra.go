// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package MyGame

import (
	flatbuffers "github.com/tsingson/goflatbuffers/go"
	"math"
)

type MonsterExtraT struct {
	D0 float64
	D1 float64
	D2 float64
	D3 float64
	F0 float32
	F1 float32
	F2 float32
	F3 float32
	Dvec []float64
	Fvec []float32
}

// MonsterExtraT object pack function
func (t *MonsterExtraT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	dvecOffset := flatbuffers.UOffsetT(0)
	if t.Dvec != nil {
		dvecLength := len(t.Dvec)
		MonsterExtraStartDvecVector(builder, dvecLength)
		for j := dvecLength - 1; j >= 0; j-- {
			builder.PrependFloat64(t.Dvec[j])
		}
		dvecOffset = MonsterExtraEndDvecVector(builder, dvecLength)
	}
	fvecOffset := flatbuffers.UOffsetT(0)
	if t.Fvec != nil {
		fvecLength := len(t.Fvec)
		MonsterExtraStartFvecVector(builder, fvecLength)
		for j := fvecLength - 1; j >= 0; j-- {
			builder.PrependFloat32(t.Fvec[j])
		}
		fvecOffset = MonsterExtraEndFvecVector(builder, fvecLength)
	}

	// pack process all field

	MonsterExtraStart(builder)
	MonsterExtraAddD0(builder, t.D0)
	MonsterExtraAddD1(builder, t.D1)
	MonsterExtraAddD2(builder, t.D2)
	MonsterExtraAddD3(builder, t.D3)
	MonsterExtraAddF0(builder, t.F0)
	MonsterExtraAddF1(builder, t.F1)
	MonsterExtraAddF2(builder, t.F2)
	MonsterExtraAddF3(builder, t.F3)
	MonsterExtraAddDvec(builder, dvecOffset)
	MonsterExtraAddFvec(builder, fvecOffset)
	return MonsterExtraEnd(builder)
}

// MonsterExtraT object unpack function
func (rcv *MonsterExtra) UnPackTo(t *MonsterExtraT) {
	t.D0 = rcv.D0()
	t.D1 = rcv.D1()
	t.D2 = rcv.D2()
	t.D3 = rcv.D3()
	t.F0 = rcv.F0()
	t.F1 = rcv.F1()
	t.F2 = rcv.F2()
	t.F3 = rcv.F3()
	dvecLength := rcv.DvecLength()
	t.Dvec = make([]float64, dvecLength)
	for j := 0; j < dvecLength; j++ {
		t.Dvec[j] = rcv.Dvec(j)	}
	fvecLength := rcv.FvecLength()
	t.Fvec = make([]float32, fvecLength)
	for j := 0; j < fvecLength; j++ {
		t.Fvec[j] = rcv.Fvec(j)	}
}

func (rcv *MonsterExtra) UnPack() *MonsterExtraT {
	if rcv == nil {
		return nil
	}
	t := &MonsterExtraT{}
	rcv.UnPackTo(t)
	return t
}

type MonsterExtra struct {
	_tab flatbuffers.Table
}

// GetRootAsMonsterExtra shortcut to access root table
func GetRootAsMonsterExtra(buf []byte, offset flatbuffers.UOffsetT) *MonsterExtra {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MonsterExtra{}
	x.Init(buf, n+offset)
	return x
}

// GetTableVectorAsMonsterExtra shortcut to access table in vector of  unions
func GetTableVectorAsMonsterExtra(table *flatbuffers.Table) *MonsterExtra {
	n := flatbuffers.GetUOffsetT(table.Bytes[table.Pos:])
	x := &MonsterExtra{}
	x.Init(table.Bytes, n+table.Pos)
	return x
}

// GetTableAsMonsterExtra shortcut to access table in single union field
func GetTableAsMonsterExtra(table *flatbuffers.Table) *MonsterExtra {
	x := &MonsterExtra{}
	x.Init(table.Bytes, table.Pos)
	return x
}

func (rcv *MonsterExtra) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MonsterExtra) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MonsterExtra) D0() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return math.NaN()
}

func (rcv *MonsterExtra) MutateD0(n float64) bool {
	return rcv._tab.MutateFloat64Slot(4, n)
}

func (rcv *MonsterExtra) D1() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return math.NaN()
}

func (rcv *MonsterExtra) MutateD1(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

func (rcv *MonsterExtra) D2() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
return +math.Inf(0)
}

func (rcv *MonsterExtra) MutateD2(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

func (rcv *MonsterExtra) D3() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return -math.Inf(0)
}

func (rcv *MonsterExtra) MutateD3(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

func (rcv *MonsterExtra) F0() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return float32(math.NaN())
}

func (rcv *MonsterExtra) MutateF0(n float32) bool {
	return rcv._tab.MutateFloat32Slot(12, n)
}

func (rcv *MonsterExtra) F1() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return float32(math.NaN())
}

func (rcv *MonsterExtra) MutateF1(n float32) bool {
	return rcv._tab.MutateFloat32Slot(14, n)
}

func (rcv *MonsterExtra) F2() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return float32(+math.Inf(0))
}

func (rcv *MonsterExtra) MutateF2(n float32) bool {
	return rcv._tab.MutateFloat32Slot(16, n)
}

func (rcv *MonsterExtra) F3() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return float32(-math.Inf(0))
}

func (rcv *MonsterExtra) MutateF3(n float32) bool {
	return rcv._tab.MutateFloat32Slot(18, n)
}

func (rcv *MonsterExtra) DvecLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MonsterExtra) Dvec(j int) float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetFloat64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *MonsterExtra) MutateDvec(j int, n float64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateFloat64(a + flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *MonsterExtra) FvecLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MonsterExtra) Fvec(j int) float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetFloat32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *MonsterExtra) MutateFvec(j int, n float32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateFloat32(a + flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func MonsterExtraStart(builder *flatbuffers.Builder) {
	builder.StartObject(11)
}

func MonsterExtraAddD0(builder *flatbuffers.Builder, D0 float64) {
	builder.PrependFloat64Slot(0, D0, math.NaN )
}

func MonsterExtraAddD1(builder *flatbuffers.Builder, D1 float64) {
	builder.PrependFloat64Slot(1, D1, nan)
}

func MonsterExtraAddD2(builder *flatbuffers.Builder, D2 float64) {
	builder.PrependFloat64Slot(2, D2, +inf)
}

func MonsterExtraAddD3(builder *flatbuffers.Builder, D3 float64) {
	builder.PrependFloat64Slot(3, D3, -inf)
}

func MonsterExtraAddF0(builder *flatbuffers.Builder, F0 float32) {
	builder.PrependFloat32Slot(4, F0, nan)
}

func MonsterExtraAddF1(builder *flatbuffers.Builder, F1 float32) {
	builder.PrependFloat32Slot(5, F1, nan)
}

func MonsterExtraAddF2(builder *flatbuffers.Builder, F2 float32) {
	builder.PrependFloat32Slot(6, F2, +inf)
}

func MonsterExtraAddF3(builder *flatbuffers.Builder, F3 float32) {
	builder.PrependFloat32Slot(7, F3, float32(-math.Inf (0)))
}

func MonsterExtraStartDvecVector(builder *flatbuffers.Builder, numElems int) {
	builder.StartVector(8, numElems, 8)
}

func MonsterExtraEndDvecVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.EndVector(numElems)
}

func MonsterExtraAddDvec(builder *flatbuffers.Builder, Dvec flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(Dvec), 0)
}

func MonsterExtraStartFvecVector(builder *flatbuffers.Builder, numElems int) {
	builder.StartVector(4, numElems, 4)
}

func MonsterExtraEndFvecVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.EndVector(numElems)
}

func MonsterExtraAddFvec(builder *flatbuffers.Builder, Fvec flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(Fvec), 0)
}

func MonsterExtraEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
