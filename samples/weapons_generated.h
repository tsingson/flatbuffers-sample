// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WEAPONS_WEAPONS_H_
#define FLATBUFFERS_GENERATED_WEAPONS_WEAPONS_H_

#include "flatbuffers/flatbuffers.h"

namespace weapons {

struct Gun;
struct GunBuilder;
struct GunT;

struct GunT : public flatbuffers::NativeTable {
  typedef Gun TableType;
  int16_t damage;
  bool bool_;
  std::string name;
  std::vector<std::string> names;
  GunT()
      : damage(0),
        bool_(false) {
  }
};

struct Gun FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GunT NativeTableType;
  typedef GunBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DAMAGE = 4,
    VT_BOOL_ = 6,
    VT_NAME = 8,
    VT_NAMES = 10
  };
  int16_t damage() const {
    return GetField<int16_t>(VT_DAMAGE, 0);
  }
  bool bool_() const {
    return GetField<uint8_t>(VT_BOOL_, 0) != 0;
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *names() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_NAMES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_DAMAGE) &&
           VerifyField<uint8_t>(verifier, VT_BOOL_) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_NAMES) &&
           verifier.VerifyVector(names()) &&
           verifier.VerifyVectorOfStrings(names()) &&
           verifier.EndTable();
  }
  GunT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(GunT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Gun> Pack(flatbuffers::FlatBufferBuilder &_fbb, const GunT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct GunBuilder {
  typedef Gun Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_damage(int16_t damage) {
    fbb_.AddElement<int16_t>(Gun::VT_DAMAGE, damage, 0);
  }
  void add_bool_(bool bool_) {
    fbb_.AddElement<uint8_t>(Gun::VT_BOOL_, static_cast<uint8_t>(bool_), 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Gun::VT_NAME, name);
  }
  void add_names(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> names) {
    fbb_.AddOffset(Gun::VT_NAMES, names);
  }
  explicit GunBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Gun> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Gun>(end);
    return o;
  }
};

inline flatbuffers::Offset<Gun> CreateGun(
    flatbuffers::FlatBufferBuilder &_fbb,
    int16_t damage = 0,
    bool bool_ = false,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> names = 0) {
  GunBuilder builder_(_fbb);
  builder_.add_names(names);
  builder_.add_name(name);
  builder_.add_damage(damage);
  builder_.add_bool_(bool_);
  return builder_.Finish();
}

inline flatbuffers::Offset<Gun> CreateGunDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int16_t damage = 0,
    bool bool_ = false,
    const char *name = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *names = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto names__ = names ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*names) : 0;
  return weapons::CreateGun(
      _fbb,
      damage,
      bool_,
      name__,
      names__);
}

flatbuffers::Offset<Gun> CreateGun(flatbuffers::FlatBufferBuilder &_fbb, const GunT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline GunT *Gun::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<weapons::GunT> _o = std::unique_ptr<weapons::GunT>(new GunT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Gun::UnPackTo(GunT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = damage(); _o->damage = _e; }
  { auto _e = bool_(); _o->bool_ = _e; }
  { auto _e = name(); if (_e) _o->name = _e->str(); }
  { auto _e = names(); if (_e) { _o->names.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->names[_i] = _e->Get(_i)->str(); } } }
}

inline flatbuffers::Offset<Gun> Gun::Pack(flatbuffers::FlatBufferBuilder &_fbb, const GunT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateGun(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Gun> CreateGun(flatbuffers::FlatBufferBuilder &_fbb, const GunT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const GunT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _damage = _o->damage;
  auto _bool_ = _o->bool_;
  auto _name = _o->name.empty() ? 0 : _fbb.CreateString(_o->name);
  auto _names = _o->names.size() ? _fbb.CreateVectorOfStrings(_o->names) : 0;
  return weapons::CreateGun(
      _fbb,
      _damage,
      _bool_,
      _name,
      _names);
}

}  // namespace weapons

#endif  // FLATBUFFERS_GENERATED_WEAPONS_WEAPONS_H_
