# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Sample

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Weapon(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsWeapon(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Weapon()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def WeaponBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4D\x47\x4D\x45", size_prefixed=size_prefixed)

    # Weapon
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Weapon
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Weapon
    def Damage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

def WeaponStart(builder): builder.StartObject(2)
def WeaponAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def WeaponAddDamage(builder, damage): builder.PrependInt16Slot(1, damage, 0)
def WeaponEnd(builder): return builder.EndObject()


class WeaponT(object):

    # WeaponT
    def __init__(self):
        self.name = None  # type: str
        self.damage = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        weapon = Weapon()
        weapon.Init(buf, pos)
        return cls.InitFromObj(weapon)

    @classmethod
    def InitFromObj(cls, weapon):
        x = WeaponT()
        x._UnPack(weapon)
        return x

    # WeaponT
    def _UnPack(self, weapon):
        if weapon is None:
            return
        self.name = weapon.Name()
        self.damage = weapon.Damage()

    # WeaponT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        WeaponStart(builder)
        if self.name is not None:
            WeaponAddName(builder, name)
        WeaponAddDamage(builder, self.damage)
        weapon = WeaponEnd(builder)
        return weapon
