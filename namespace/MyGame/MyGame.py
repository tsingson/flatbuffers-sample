# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MyGame

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MyGame(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsMyGame(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MyGame()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def MyGameBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4D\x47\x4D\x45", size_prefixed=size_prefixed)

    # MyGame
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MyGame
    def CharactersType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # MyGame
    def Characters(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def MyGameStart(builder): builder.StartObject(2)
def MyGameAddCharactersType(builder, CharactersType): builder.PrependUint8Slot(0, CharactersType, 0)
def MyGameAddCharacters(builder, Characters): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(Characters), 0)
def MyGameEnd(builder): return builder.EndObject()

import MyGame.Character
import MyGame.Sample.Monster
import weapons.Gun
try:
    from typing import Union
except:
    pass

class MyGameT(object):

    # MyGameT
    def __init__(self):
        self.charactersType = 0  # type: int
        self.characters = None  # type: Union[None, weapons.Gun.GunT, MyGame.Sample.Monster.MonsterT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        myGame = MyGame()
        myGame.Init(buf, pos)
        return cls.InitFromObj(myGame)

    @classmethod
    def InitFromObj(cls, myGame):
        x = MyGameT()
        x._UnPack(myGame)
        return x

    # MyGameT
    def _UnPack(self, myGame):
        if myGame is None:
            return
        self.charactersType = myGame.CharactersType()
        self.characters = MyGame.Character.CharacterCreator(self.charactersType, myGame.Characters())

    # MyGameT
    def Pack(self, builder):
        if self.characters is not None:
            characters = self.characters.Pack(builder)
        MyGameStart(builder)
        MyGameAddCharactersType(builder, self.charactersType)
        if self.characters is not None:
            MyGameAddCharacters(builder, characters)
        myGame = MyGameEnd(builder)
        return myGame
