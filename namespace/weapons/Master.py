# automatically generated by the FlatBuffers compiler, do not modify

# namespace: weapons

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Master(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsMaster(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Master()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def MasterBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4D\x47\x4D\x45", size_prefixed=size_prefixed)

    # Master
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

def MasterStart(builder): builder.StartObject(0)
def MasterEnd(builder): return builder.EndObject()


class MasterT(object):

    # MasterT
    def __init__(self):
        pass

    @classmethod
    def InitFromBuf(cls, buf, pos):
        master = Master()
        master.Init(buf, pos)
        return cls.InitFromObj(master)

    @classmethod
    def InitFromObj(cls, master):
        x = MasterT()
        x._UnPack(master)
        return x

    # MasterT
    def _UnPack(self, master):
        if master is None:
            return

    # MasterT
    def Pack(self, builder):
        MasterStart(builder)
        master = MasterEnd(builder)
        return master
