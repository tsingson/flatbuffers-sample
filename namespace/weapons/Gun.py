# automatically generated by the FlatBuffers compiler, do not modify

# namespace: weapons

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Gun(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsGun(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Gun()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GunBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4D\x47\x4D\x45", size_prefixed=size_prefixed)

    # Gun
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Gun
    def Damage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # Gun
    def Bool(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Gun
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Gun
    def Names(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Gun
    def NamesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Gun
    def NamesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def GunStart(builder): builder.StartObject(4)
def GunAddDamage(builder, damage): builder.PrependInt16Slot(0, damage, 0)
def GunAddBool(builder, bool): builder.PrependBoolSlot(1, bool, 0)
def GunAddName(builder, name): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def GunAddNames(builder, names): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(names), 0)
def GunStartNamesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def GunEnd(builder): return builder.EndObject()

try:
    from typing import List
except:
    pass

class GunT(object):

    # GunT
    def __init__(self):
        self.damage = 0  # type: int
        self.bool = False  # type: bool
        self.name = None  # type: str
        self.names = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        gun = Gun()
        gun.Init(buf, pos)
        return cls.InitFromObj(gun)

    @classmethod
    def InitFromObj(cls, gun):
        x = GunT()
        x._UnPack(gun)
        return x

    # GunT
    def _UnPack(self, gun):
        if gun is None:
            return
        self.damage = gun.Damage()
        self.bool = gun.Bool()
        self.name = gun.Name()
        if not gun.NamesIsNone():
            self.names = []
            for i in range(gun.NamesLength()):
                self.names.append(gun.Names(i))

    # GunT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.names is not None:
            nameslist = []
            for i in range(len(self.names)):
                nameslist.append(builder.CreateString(self.names[i]))
            GunStartNamesVector(builder, len(self.names))
            for i in reversed(range(len(self.names))):
                builder.PrependUOffsetTRelative(nameslist[i])
            names = builder.EndVector(len(self.names))
        GunStart(builder)
        GunAddDamage(builder, self.damage)
        GunAddBool(builder, self.bool)
        if self.name is not None:
            GunAddName(builder, name)
        if self.names is not None:
            GunAddNames(builder, names)
        gun = GunEnd(builder)
        return gun
