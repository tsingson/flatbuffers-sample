// automatically generated by the FlatBuffers compiler, do not modify

package Mygame.Example;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class SpaceShip extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static SpaceShip getRootAsSpaceShip(ByteBuffer _bb) { return getRootAsSpaceShip(_bb, new SpaceShip()); }
  public static SpaceShip getRootAsSpaceShip(ByteBuffer _bb, SpaceShip obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SpaceShip __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Mygame.Example.Vec3 size() { return size(new Mygame.Example.Vec3()); }
  public Mygame.Example.Vec3 size(Mygame.Example.Vec3 obj) { int o = __offset(4); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  public int power() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public String name() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }

  public static void startSpaceShip(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addSize(FlatBufferBuilder builder, int sizeOffset) { builder.addStruct(0, sizeOffset, 0); }
  public static void addPower(FlatBufferBuilder builder, int power) { builder.addInt(1, power, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(2, nameOffset, 0); }
  public static int endSpaceShip(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SpaceShip get(int j) { return get(new SpaceShip(), j); }
    public SpaceShip get(SpaceShip obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

