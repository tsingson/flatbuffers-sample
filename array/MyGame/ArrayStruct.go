// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package MyGame

import (
	flatbuffers "github.com/google/flatbuffers/go"
	MyGame__Example "github.com/tsingson/flatbuffers-sample/array/MyGame/Example"
)

type ArrayStructT struct {
	A0 [1]*MyGame__Example.NestedStructT
	A1 [2]*MyGame__Example.NestedStructT
	A2 [3]*MyGame__Example.NestedStructT
	A3 *MyGame__Example.NestedStructT
	A  float32
	B  [15]int32
	C  int8
	D  [2]*MyGame__Example.NestedStructT
	D1 *MyGame__Example.NestedStructT
	E  int32
	F  [2]int64
	F1 [2]*MyGame__Example.NestedStructT
}

func (t *ArrayStructT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	return CreateArrayStruct(builder, t.A0, t.A1, t.A2, t.A3.A, t.A3.B, t.A3.C, t.A3.C1, t.A3.D, t.A, t.B, t.C, t.D, t.D1.A, t.D1.B, t.D1.C, t.D1.C1, t.D1.D, t.E, t.F, t.F1)
}
func (rcv *ArrayStruct) UnPackTo(t *ArrayStructT) {
	t.A0 = rcv.A0()
	t.A1 = rcv.A1()
	t.A2 = rcv.A2()
	t.A3 = rcv.A3(nil).UnPack()
	t.A = rcv.A()
	t.B = rcv.B()
	t.C = rcv.C()
	t.D = rcv.D()
	t.D1 = rcv.D1(nil).UnPack()
	t.E = rcv.E()
	t.F = rcv.F()
	t.F1 = rcv.F1()
}

func (rcv *ArrayStruct) UnPack() *ArrayStructT {
	if rcv == nil {
		return nil
	}
	t := &ArrayStructT{}
	rcv.UnPackTo(t)
	return t
}

type ArrayStruct struct {
	_tab flatbuffers.Struct
}

// GetStructVectorAsArrayStruct shortcut to access struct in vector of unions
func GetStructVectorAsArrayStruct(table *flatbuffers.Table) *ArrayStruct {
	n := flatbuffers.GetUOffsetT(table.Bytes[table.Pos:])
	x := &ArrayStruct{}
	x.Init(table.Bytes, n+table.Pos)
	return x
}

// GetStructAsArrayStruct shortcut to access struct in single union field
func GetStructAsArrayStruct(table *flatbuffers.Table) *ArrayStruct {
	x := &ArrayStruct{}
	x.Init(table.Bytes, table.Pos)
	return x
}

func (rcv *ArrayStruct) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ArrayStruct) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *ArrayStruct) A3(obj *MyGame__Example.NestedStruct) *MyGame__Example.NestedStruct {
	if obj == nil {
		obj = new(MyGame__Example.NestedStruct)
	}
	obj.Init(rcv._tab.Bytes, rcv._tab.Pos+192)
	return obj
}
func (rcv *ArrayStruct) A() float32 {
	return rcv._tab.GetFloat32(rcv._tab.Pos + flatbuffers.UOffsetT(224))
}
func (rcv *ArrayStruct) C() int8 {
	return rcv._tab.GetInt8(rcv._tab.Pos + flatbuffers.UOffsetT(288))
}
func (rcv *ArrayStruct) D1(obj *MyGame__Example.NestedStruct) *MyGame__Example.NestedStruct {
	if obj == nil {
		obj = new(MyGame__Example.NestedStruct)
	}
	obj.Init(rcv._tab.Bytes, rcv._tab.Pos+360)
	return obj
}
func (rcv *ArrayStruct) E() int32 {
	return rcv._tab.GetInt32(rcv._tab.Pos + flatbuffers.UOffsetT(392))
}

// support fixed-length array.

// step: 1 field name:  a0 native type: [1]*MyGame__Example.NestedStructT fixed_length in array: 1 struct bytesize: 32
// --------------------------------------
// step: 2 field name:  a1 native type: [2]*MyGame__Example.NestedStructT fixed_length in array: 2 struct bytesize: 32
// --------------------------------------
// step: 3 field name:  a2 native type: [3]*MyGame__Example.NestedStructT fixed_length in array: 3 struct bytesize: 32
// --------------------------------------
// step: 4 field name:  a3 native type: *MyGame__Example.NestedStructT fixed_length in array: 0 struct bytesize: 32
// step: 4 field name:  a native type: float32
// step: 4 field name:  b native type: [15]int32
// step: 4 field name:  c native type: int8
// --------------------------------------
// step: 5 field name:  d native type: [2]*MyGame__Example.NestedStructT fixed_length in array: 2 struct bytesize: 32
// --------------------------------------
// step: 6 field name:  d1 native type: *MyGame__Example.NestedStructT fixed_length in array: 0 struct bytesize: 32
// step: 6 field name:  e native type: int32
// step: 6 field name:  f native type: [2]int64
// --------------------------------------
// step: 7 field name:  f1 native type: [2]*MyGame__Example.NestedStructT fixed_length in array: 2 struct bytesize: 32
// --------------------------------------
