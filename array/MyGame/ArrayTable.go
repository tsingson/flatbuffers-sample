// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package MyGame

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ArrayTableT struct {
	A *ArrayStructT
}

// ArrayTableT object pack function
func (t *ArrayTableT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}

	// pack process all field

	ArrayTableStart(builder)
	aOffset := t.A.Pack(builder)
	ArrayTableAddA(builder, aOffset)
	return ArrayTableEnd(builder)
}

// ArrayTableT object unpack function
func (rcv *ArrayTable) UnPackTo(t *ArrayTableT) {
	t.A = rcv.A(nil).UnPack()
}

func (rcv *ArrayTable) UnPack() *ArrayTableT {
	if rcv == nil {
		return nil
	}
	t := &ArrayTableT{}
	rcv.UnPackTo(t)
	return t
}

type ArrayTable struct {
	_tab flatbuffers.Table
}

// GetRootAsArrayTable shortcut to access root table
func GetRootAsArrayTable(buf []byte, offset flatbuffers.UOffsetT) *ArrayTable {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ArrayTable{}
	x.Init(buf, n+offset)
	return x
}

// GetTableVectorAsArrayTable shortcut to access table in vector of  unions
func GetTableVectorAsArrayTable(table *flatbuffers.Table) *ArrayTable {
	n := flatbuffers.GetUOffsetT(table.Bytes[table.Pos:])
	x := &ArrayTable{}
	x.Init(table.Bytes, n+table.Pos)
	return x
}

// GetTableAsArrayTable shortcut to access table in single union field
func GetTableAsArrayTable(table *flatbuffers.Table) *ArrayTable {
	x := &ArrayTable{}
	x.Init(table.Bytes, table.Pos)
	return x
}

func (rcv *ArrayTable) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ArrayTable) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ArrayTable) A(obj *ArrayStruct) *ArrayStruct {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(ArrayStruct)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func ArrayTableStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}

func ArrayTableAddA(builder *flatbuffers.Builder, a flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(a), 0)
}

func ArrayTableEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
