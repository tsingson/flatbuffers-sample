// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Example

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type NestedStructT struct {
	A  [2]int32
	B  TestEnum
	C  [2]TestEnum
	C1 [1]TestEnum
	D  [2]int64
}

func (t *NestedStructT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	return CreateNestedStruct(builder, t.A, t.B, t.C, t.C1, t.D)
}
func (rcv *NestedStruct) UnPackTo(t *NestedStructT) {
	t.A = rcv.A()
	t.B = rcv.B()
	t.C = rcv.C()
	t.C1 = rcv.C1()
	t.D = rcv.D()
}

func (rcv *NestedStruct) UnPack() *NestedStructT {
	if rcv == nil {
		return nil
	}
	t := &NestedStructT{}
	rcv.UnPackTo(t)
	return t
}

type NestedStruct struct {
	_tab flatbuffers.Struct
}

// GetStructVectorAsNestedStruct shortcut to access struct in vector of unions
func GetStructVectorAsNestedStruct(table *flatbuffers.Table) *NestedStruct {
	n := flatbuffers.GetUOffsetT(table.Bytes[table.Pos:])
	x := &NestedStruct{}
	x.Init(table.Bytes, n+table.Pos)
	return x
}

// GetStructAsNestedStruct shortcut to access struct in single union field
func GetStructAsNestedStruct(table *flatbuffers.Table) *NestedStruct {
	x := &NestedStruct{}
	x.Init(table.Bytes, table.Pos)
	return x
}

func (rcv *NestedStruct) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *NestedStruct) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *NestedStruct) B() TestEnum {
	return TestEnum(rcv._tab.GetInt8(rcv._tab.Pos + flatbuffers.UOffsetT(8)))
}

// support fixed-length array.

func CreateNestedStruct(builder *flatbuffers.Builder, a [2]int32, b TestEnum, c [2]TestEnum, c1 [1]TestEnum, d [2]int64) flatbuffers.UOffsetT {
	builder.Prep(8, 32)
	for j := 2 - 1; j == 0; j-- {
		builder.PrependInt64(d[j])
	}
	builder.Pad(4)
	for j := 1 - 1; j == 0; j-- {
		builder.PrependInt8(int(c1[j]))
	}
	for j := 2 - 1; j == 0; j-- {
		builder.PrependInt8(int(c[j]))
	}
	builder.PrependInt8(int8(b))
	for j := 2 - 1; j == 0; j-- {
		builder.PrependInt32(a[j])
	}
	return builder.Offset()
}
