// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var MyGame = MyGame || {};

/**
 * @const
 * @namespace
 */
MyGame.Example = MyGame.Example || {};

/**
 * @enum {number}
 */
MyGame.Example.Color = {
  Red: 0,
  Green: 1,
  Blue: 2
};

/**
 * @enum {string}
 */
MyGame.Example.ColorName = {
  '0': 'Red',
  '1': 'Green',
  '2': 'Blue'
};

/**
 * @constructor
 */
MyGame.Example.ItemStruct = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {MyGame.Example.ItemStruct}
 */
MyGame.Example.ItemStruct.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns {boolean}
 */
MyGame.Example.ItemStruct.prototype.bool = function() {
  return !!this.bb.readInt8(this.bb_pos);
};

/**
 * @returns {flatbuffers.Long}
 */
MyGame.Example.ItemStruct.prototype.u64 = function() {
  return this.bb.readUint64(this.bb_pos + 8);
};

/**
 * @returns {MyGame.Example.Color}
 */
MyGame.Example.ItemStruct.prototype.color = function() {
  return /** @type {MyGame.Example.Color} */ (this.bb.readInt8(this.bb_pos + 16));
};

/**
 * @returns {number}
 */
MyGame.Example.ItemStruct.prototype.i8 = function() {
  return this.bb.readInt8(this.bb_pos + 17);
};

/**
 * @returns {number}
 */
MyGame.Example.ItemStruct.prototype.f32 = function() {
  return this.bb.readFloat32(this.bb_pos + 20);
};

/**
 * @returns {number}
 */
MyGame.Example.ItemStruct.prototype.ubyte = function() {
  return this.bb.readUint8(this.bb_pos + 24);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} bool
 * @param {flatbuffers.Long} u64
 * @param {MyGame.Example.Color} color
 * @param {number} i8
 * @param {number} f32
 * @param {number} ubyte
 * @returns {flatbuffers.Offset}
 */
MyGame.Example.ItemStruct.createItemStruct = function(builder, bool, u64, color, i8, f32, ubyte) {
  builder.prep(8, 32);
  builder.pad(7);
  builder.writeInt8(ubyte);
  builder.writeFloat32(f32);
  builder.pad(2);
  builder.writeInt8(i8);
  builder.writeInt8(color);
  builder.writeInt64(u64);
  builder.pad(7);
  builder.writeInt8(+bool);
  return builder.offset();
};

/**
 * @constructor
 */
MyGame.Example.ItemStruct1 = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {MyGame.Example.ItemStruct1}
 */
MyGame.Example.ItemStruct1.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns {boolean}
 */
MyGame.Example.ItemStruct1.prototype.bool = function() {
  return !!this.bb.readInt8(this.bb_pos);
};

/**
 * @returns {MyGame.Example.Color}
 */
MyGame.Example.ItemStruct1.prototype.color = function() {
  return /** @type {MyGame.Example.Color} */ (this.bb.readInt8(this.bb_pos + 1));
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} bool
 * @param {MyGame.Example.Color} color
 * @returns {flatbuffers.Offset}
 */
MyGame.Example.ItemStruct1.createItemStruct1 = function(builder, bool, color) {
  builder.prep(1, 2);
  builder.writeInt8(color);
  builder.writeInt8(+bool);
  return builder.offset();
};

/**
 * @constructor
 */
MyGame.Example.ItemTable = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {MyGame.Example.ItemTable}
 */
MyGame.Example.ItemTable.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {MyGame.Example.ItemTable=} obj
 * @returns {MyGame.Example.ItemTable}
 */
MyGame.Example.ItemTable.getRootAsItemTable = function(bb, obj) {
  return (obj || new MyGame.Example.ItemTable).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {MyGame.Example.ItemTable=} obj
 * @returns {MyGame.Example.ItemTable}
 */
MyGame.Example.ItemTable.getSizePrefixedRootAsItemTable = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MyGame.Example.ItemTable).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {boolean}
 */
MyGame.Example.ItemTable.prototype.bool = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @returns {flatbuffers.Long}
 */
MyGame.Example.ItemTable.prototype.u64 = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readUint64(this.bb_pos + offset) : this.bb.createLong(0, 0);
};

/**
 * @returns {MyGame.Example.Color}
 */
MyGame.Example.ItemTable.prototype.color = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? /** @type {MyGame.Example.Color} */ (this.bb.readInt8(this.bb_pos + offset)) : MyGame.Example.Color.Red;
};

/**
 * @returns {number}
 */
MyGame.Example.ItemTable.prototype.i8 = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
MyGame.Example.ItemTable.prototype.f32 = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
MyGame.Example.ItemTable.prototype.ubyte = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
MyGame.Example.ItemTable.startItemTable = function(builder) {
  builder.startObject(6);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} bool
 */
MyGame.Example.ItemTable.addBool = function(builder, bool) {
  builder.addFieldInt8(0, +bool, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} u64
 */
MyGame.Example.ItemTable.addU64 = function(builder, u64) {
  builder.addFieldInt64(1, u64, builder.createLong(0, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {MyGame.Example.Color} color
 */
MyGame.Example.ItemTable.addColor = function(builder, color) {
  builder.addFieldInt8(2, color, MyGame.Example.Color.Red);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} i8
 */
MyGame.Example.ItemTable.addI8 = function(builder, i8) {
  builder.addFieldInt8(3, i8, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} f32
 */
MyGame.Example.ItemTable.addF32 = function(builder, f32) {
  builder.addFieldFloat32(4, f32, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} ubyte
 */
MyGame.Example.ItemTable.addUbyte = function(builder, ubyte) {
  builder.addFieldInt8(5, ubyte, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
MyGame.Example.ItemTable.endItemTable = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} bool
 * @param {flatbuffers.Long} u64
 * @param {MyGame.Example.Color} color
 * @param {number} i8
 * @param {number} f32
 * @param {number} ubyte
 * @returns {flatbuffers.Offset}
 */
MyGame.Example.ItemTable.createItemTable = function(builder, bool, u64, color, i8, f32, ubyte) {
  MyGame.Example.ItemTable.startItemTable(builder);
  MyGame.Example.ItemTable.addBool(builder, bool);
  MyGame.Example.ItemTable.addU64(builder, u64);
  MyGame.Example.ItemTable.addColor(builder, color);
  MyGame.Example.ItemTable.addI8(builder, i8);
  MyGame.Example.ItemTable.addF32(builder, f32);
  MyGame.Example.ItemTable.addUbyte(builder, ubyte);
  return MyGame.Example.ItemTable.endItemTable(builder);
}

/**
 * @constructor
 */
MyGame.Example.UChar = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {MyGame.Example.UChar}
 */
MyGame.Example.UChar.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {MyGame.Example.UChar=} obj
 * @returns {MyGame.Example.UChar}
 */
MyGame.Example.UChar.getRootAsUChar = function(bb, obj) {
  return (obj || new MyGame.Example.UChar).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {MyGame.Example.UChar=} obj
 * @returns {MyGame.Example.UChar}
 */
MyGame.Example.UChar.getSizePrefixedRootAsUChar = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MyGame.Example.UChar).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @returns {number}
 */
MyGame.Example.UChar.prototype.inventory = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
};

/**
 * @returns {number}
 */
MyGame.Example.UChar.prototype.inventoryLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Uint8Array}
 */
MyGame.Example.UChar.prototype.inventoryArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {number} index
 * @returns {number}
 */
MyGame.Example.UChar.prototype.inventory1 = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readInt8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
};

/**
 * @returns {number}
 */
MyGame.Example.UChar.prototype.inventory1Length = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int8Array}
 */
MyGame.Example.UChar.prototype.inventory1Array = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? new Int8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {number} index
 * @returns {MyGame.Example.Color}
 */
MyGame.Example.UChar.prototype.colorList = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? /** @type {MyGame.Example.Color} */ (this.bb.readInt8(this.bb.__vector(this.bb_pos + offset) + index)) : /** @type {MyGame.Example.Color} */ (0);
};

/**
 * @returns {number}
 */
MyGame.Example.UChar.prototype.colorListLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int8Array}
 */
MyGame.Example.UChar.prototype.colorListArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? new Int8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
MyGame.Example.UChar.startUChar = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} inventoryOffset
 */
MyGame.Example.UChar.addInventory = function(builder, inventoryOffset) {
  builder.addFieldOffset(0, inventoryOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
MyGame.Example.UChar.createInventoryVector = function(builder, data) {
  builder.startVector(1, data.length, 1);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
MyGame.Example.UChar.startInventoryVector = function(builder, numElems) {
  builder.startVector(1, numElems, 1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} inventory1Offset
 */
MyGame.Example.UChar.addInventory1 = function(builder, inventory1Offset) {
  builder.addFieldOffset(1, inventory1Offset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
MyGame.Example.UChar.createInventory1Vector = function(builder, data) {
  builder.startVector(1, data.length, 1);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
MyGame.Example.UChar.startInventory1Vector = function(builder, numElems) {
  builder.startVector(1, numElems, 1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} colorListOffset
 */
MyGame.Example.UChar.addColorList = function(builder, colorListOffset) {
  builder.addFieldOffset(2, colorListOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<MyGame.Example.Color>} data
 * @returns {flatbuffers.Offset}
 */
MyGame.Example.UChar.createColorListVector = function(builder, data) {
  builder.startVector(1, data.length, 1);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
MyGame.Example.UChar.startColorListVector = function(builder, numElems) {
  builder.startVector(1, numElems, 1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
MyGame.Example.UChar.endUChar = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} inventoryOffset
 * @param {flatbuffers.Offset} inventory1Offset
 * @param {flatbuffers.Offset} colorListOffset
 * @returns {flatbuffers.Offset}
 */
MyGame.Example.UChar.createUChar = function(builder, inventoryOffset, inventory1Offset, colorListOffset) {
  MyGame.Example.UChar.startUChar(builder);
  MyGame.Example.UChar.addInventory(builder, inventoryOffset);
  MyGame.Example.UChar.addInventory1(builder, inventory1Offset);
  MyGame.Example.UChar.addColorList(builder, colorListOffset);
  return MyGame.Example.UChar.endUChar(builder);
}

/**
 * @constructor
 */
MyGame.Example.ArrayTable = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {MyGame.Example.ArrayTable}
 */
MyGame.Example.ArrayTable.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {MyGame.Example.ArrayTable=} obj
 * @returns {MyGame.Example.ArrayTable}
 */
MyGame.Example.ArrayTable.getRootAsArrayTable = function(bb, obj) {
  return (obj || new MyGame.Example.ArrayTable).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {MyGame.Example.ArrayTable=} obj
 * @returns {MyGame.Example.ArrayTable}
 */
MyGame.Example.ArrayTable.getSizePrefixedRootAsArrayTable = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MyGame.Example.ArrayTable).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {boolean}
 */
MyGame.Example.ArrayTable.bufferHasIdentifier = function(bb) {
  return bb.__has_identifier('ARRT');
};

/**
 * @returns {boolean}
 */
MyGame.Example.ArrayTable.prototype.bool = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param {number} index
 * @returns {boolean}
 */
MyGame.Example.ArrayTable.prototype.boolList = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? !!this.bb.readInt8(this.bb.__vector(this.bb_pos + offset) + index) : false;
};

/**
 * @returns {number}
 */
MyGame.Example.ArrayTable.prototype.boolListLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int8Array}
 */
MyGame.Example.ArrayTable.prototype.boolListArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? new Int8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @returns {MyGame.Example.Color}
 */
MyGame.Example.ArrayTable.prototype.color = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? /** @type {MyGame.Example.Color} */ (this.bb.readInt8(this.bb_pos + offset)) : MyGame.Example.Color.Red;
};

/**
 * @param {number} index
 * @returns {MyGame.Example.Color}
 */
MyGame.Example.ArrayTable.prototype.colorList = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? /** @type {MyGame.Example.Color} */ (this.bb.readInt8(this.bb.__vector(this.bb_pos + offset) + index)) : /** @type {MyGame.Example.Color} */ (0);
};

/**
 * @returns {number}
 */
MyGame.Example.ArrayTable.prototype.colorListLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int8Array}
 */
MyGame.Example.ArrayTable.prototype.colorListArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? new Int8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @returns {number}
 */
MyGame.Example.ArrayTable.prototype.i8 = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
};

/**
 * @param {number} index
 * @returns {number}
 */
MyGame.Example.ArrayTable.prototype.i8List = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.readInt8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
};

/**
 * @returns {number}
 */
MyGame.Example.ArrayTable.prototype.i8ListLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int8Array}
 */
MyGame.Example.ArrayTable.prototype.i8ListArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? new Int8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @returns {number}
 */
MyGame.Example.ArrayTable.prototype.f32 = function() {
  var offset = this.bb.__offset(this.bb_pos, 16);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param {number} index
 * @returns {number}
 */
MyGame.Example.ArrayTable.prototype.f32List = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 18);
  return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
MyGame.Example.ArrayTable.prototype.f32ListLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 18);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Float32Array}
 */
MyGame.Example.ArrayTable.prototype.f32ListArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 18);
  return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
MyGame.Example.ArrayTable.prototype.string = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 20);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {number} index
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
MyGame.Example.ArrayTable.prototype.strList = function(index, optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 22);
  return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
MyGame.Example.ArrayTable.prototype.strListLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 22);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {MyGame.Example.ItemStruct=} obj
 * @returns {MyGame.Example.ItemStruct|null}
 */
MyGame.Example.ArrayTable.prototype.struct = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 24);
  return offset ? (obj || new MyGame.Example.ItemStruct).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {number} index
 * @param {MyGame.Example.ItemStruct=} obj
 * @returns {MyGame.Example.ItemStruct}
 */
MyGame.Example.ArrayTable.prototype.structList = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 26);
  return offset ? (obj || new MyGame.Example.ItemStruct).__init(this.bb.__vector(this.bb_pos + offset) + index * 32, this.bb) : null;
};

/**
 * @returns {number}
 */
MyGame.Example.ArrayTable.prototype.structListLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 26);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {MyGame.Example.ItemTable=} obj
 * @returns {MyGame.Example.ItemTable|null}
 */
MyGame.Example.ArrayTable.prototype.table = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 28);
  return offset ? (obj || new MyGame.Example.ItemTable).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {number} index
 * @param {MyGame.Example.ItemTable=} obj
 * @returns {MyGame.Example.ItemTable}
 */
MyGame.Example.ArrayTable.prototype.tableList = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 30);
  return offset ? (obj || new MyGame.Example.ItemTable).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
MyGame.Example.ArrayTable.prototype.tableListLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 30);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
MyGame.Example.ArrayTable.startArrayTable = function(builder) {
  builder.startObject(14);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} bool
 */
MyGame.Example.ArrayTable.addBool = function(builder, bool) {
  builder.addFieldInt8(0, +bool, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} boolListOffset
 */
MyGame.Example.ArrayTable.addBoolList = function(builder, boolListOffset) {
  builder.addFieldOffset(1, boolListOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<boolean>} data
 * @returns {flatbuffers.Offset}
 */
MyGame.Example.ArrayTable.createBoolListVector = function(builder, data) {
  builder.startVector(1, data.length, 1);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt8(+data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
MyGame.Example.ArrayTable.startBoolListVector = function(builder, numElems) {
  builder.startVector(1, numElems, 1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {MyGame.Example.Color} color
 */
MyGame.Example.ArrayTable.addColor = function(builder, color) {
  builder.addFieldInt8(2, color, MyGame.Example.Color.Red);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} colorListOffset
 */
MyGame.Example.ArrayTable.addColorList = function(builder, colorListOffset) {
  builder.addFieldOffset(3, colorListOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<MyGame.Example.Color>} data
 * @returns {flatbuffers.Offset}
 */
MyGame.Example.ArrayTable.createColorListVector = function(builder, data) {
  builder.startVector(1, data.length, 1);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
MyGame.Example.ArrayTable.startColorListVector = function(builder, numElems) {
  builder.startVector(1, numElems, 1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} i8
 */
MyGame.Example.ArrayTable.addI8 = function(builder, i8) {
  builder.addFieldInt8(4, i8, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} i8ListOffset
 */
MyGame.Example.ArrayTable.addI8List = function(builder, i8ListOffset) {
  builder.addFieldOffset(5, i8ListOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
MyGame.Example.ArrayTable.createI8ListVector = function(builder, data) {
  builder.startVector(1, data.length, 1);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
MyGame.Example.ArrayTable.startI8ListVector = function(builder, numElems) {
  builder.startVector(1, numElems, 1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} f32
 */
MyGame.Example.ArrayTable.addF32 = function(builder, f32) {
  builder.addFieldFloat32(6, f32, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} f32ListOffset
 */
MyGame.Example.ArrayTable.addF32List = function(builder, f32ListOffset) {
  builder.addFieldOffset(7, f32ListOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
MyGame.Example.ArrayTable.createF32ListVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
MyGame.Example.ArrayTable.startF32ListVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} stringOffset
 */
MyGame.Example.ArrayTable.addString = function(builder, stringOffset) {
  builder.addFieldOffset(8, stringOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} strListOffset
 */
MyGame.Example.ArrayTable.addStrList = function(builder, strListOffset) {
  builder.addFieldOffset(9, strListOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
MyGame.Example.ArrayTable.createStrListVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
MyGame.Example.ArrayTable.startStrListVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} structOffset
 */
MyGame.Example.ArrayTable.addStruct = function(builder, structOffset) {
  builder.addFieldStruct(10, structOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} structListOffset
 */
MyGame.Example.ArrayTable.addStructList = function(builder, structListOffset) {
  builder.addFieldOffset(11, structListOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
MyGame.Example.ArrayTable.startStructListVector = function(builder, numElems) {
  builder.startVector(32, numElems, 8);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} tableOffset
 */
MyGame.Example.ArrayTable.addTable = function(builder, tableOffset) {
  builder.addFieldOffset(12, tableOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} tableListOffset
 */
MyGame.Example.ArrayTable.addTableList = function(builder, tableListOffset) {
  builder.addFieldOffset(13, tableListOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
MyGame.Example.ArrayTable.createTableListVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
MyGame.Example.ArrayTable.startTableListVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
MyGame.Example.ArrayTable.endArrayTable = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
MyGame.Example.ArrayTable.finishArrayTableBuffer = function(builder, offset) {
  builder.finish(offset, 'ARRT');
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
MyGame.Example.ArrayTable.finishSizePrefixedArrayTableBuffer = function(builder, offset) {
  builder.finish(offset, 'ARRT', true);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} bool
 * @param {flatbuffers.Offset} boolListOffset
 * @param {MyGame.Example.Color} color
 * @param {flatbuffers.Offset} colorListOffset
 * @param {number} i8
 * @param {flatbuffers.Offset} i8ListOffset
 * @param {number} f32
 * @param {flatbuffers.Offset} f32ListOffset
 * @param {flatbuffers.Offset} stringOffset
 * @param {flatbuffers.Offset} strListOffset
 * @param {flatbuffers.Offset} structOffset
 * @param {flatbuffers.Offset} structListOffset
 * @param {flatbuffers.Offset} tableOffset
 * @param {flatbuffers.Offset} tableListOffset
 * @returns {flatbuffers.Offset}
 */
MyGame.Example.ArrayTable.createArrayTable = function(builder, bool, boolListOffset, color, colorListOffset, i8, i8ListOffset, f32, f32ListOffset, stringOffset, strListOffset, structOffset, structListOffset, tableOffset, tableListOffset) {
  MyGame.Example.ArrayTable.startArrayTable(builder);
  MyGame.Example.ArrayTable.addBool(builder, bool);
  MyGame.Example.ArrayTable.addBoolList(builder, boolListOffset);
  MyGame.Example.ArrayTable.addColor(builder, color);
  MyGame.Example.ArrayTable.addColorList(builder, colorListOffset);
  MyGame.Example.ArrayTable.addI8(builder, i8);
  MyGame.Example.ArrayTable.addI8List(builder, i8ListOffset);
  MyGame.Example.ArrayTable.addF32(builder, f32);
  MyGame.Example.ArrayTable.addF32List(builder, f32ListOffset);
  MyGame.Example.ArrayTable.addString(builder, stringOffset);
  MyGame.Example.ArrayTable.addStrList(builder, strListOffset);
  MyGame.Example.ArrayTable.addStruct(builder, structOffset);
  MyGame.Example.ArrayTable.addStructList(builder, structListOffset);
  MyGame.Example.ArrayTable.addTable(builder, tableOffset);
  MyGame.Example.ArrayTable.addTableList(builder, tableListOffset);
  return MyGame.Example.ArrayTable.endArrayTable(builder);
}

// Exports for Node.js and RequireJS
this.MyGame = MyGame;
