// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package MyGame

import (
	flatbuffers "github.com/google/flatbuffers/go"
	MyGame__Example "github.com/tsingson/flatbuffers-sample/fixed-length-array/MyGame/Example"
)

// ArrayStructT native go object
type ArrayStructT struct {
	A  float32
	B  [15]int32
	C  int8
	D  [2]*MyGame__Example.NestedStructT
	D1 *MyGame__Example.NestedStructT
	E  int32
	F  [2]int64
}

func (t *ArrayStructT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	return CreateArrayStruct(builder, t.A, t.B, t.C, t.D, t.D1.A, t.D1.B, t.D1.C, t.D1.D, t.E, t.F)
}

func (rcv *ArrayStruct) UnPackTo(t *ArrayStructT) {
	t.A = rcv.A()
	t.B = rcv.B()
	t.C = rcv.C()
	t.D = rcv.D()
	t.D1 = rcv.D1(nil).UnPack()
	t.E = rcv.E()
	t.F = rcv.F()
}

func (rcv *ArrayStruct) UnPack() *ArrayStructT {
	if rcv == nil {
		return nil
	}
	t := &ArrayStructT{}
	rcv.UnPackTo(t)
	return t
}

type ArrayStruct struct {
	_tab flatbuffers.Struct
}

// GetStructVectorAsArrayStruct shortcut to access struct in vector of unions
func GetStructVectorAsArrayStruct(table *flatbuffers.Table) *ArrayStruct {
	n := flatbuffers.GetUOffsetT(table.Bytes[table.Pos:])
	x := &ArrayStruct{}
	x.Init(table.Bytes, n+table.Pos)
	return x
}

// GetStructAsArrayStruct shortcut to access struct in single union field
func GetStructAsArrayStruct(table *flatbuffers.Table) *ArrayStruct {
	x := &ArrayStruct{}
	x.Init(table.Bytes, table.Pos)
	return x
}

func (rcv *ArrayStruct) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ArrayStruct) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *ArrayStruct) A() float32 {
	return rcv._tab.GetFloat32(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}

// fixed struct array B
func (rcv *ArrayStruct) B() [15]int32 {
	result := make([]int32, 15)
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		for j := 0; j < 15; j++ {
			result[j] = rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
		}
	}
	return result
}

func (rcv *ArrayStruct) C() int8 {
	return rcv._tab.GetInt8(rcv._tab.Pos + flatbuffers.UOffsetT(64))
}

// fixed struct array D
// IsStruct *MyGame__Example.NestedStructT
func (rcv *ArrayStruct) D1(obj *MyGame__Example.NestedStruct) *MyGame__Example.NestedStruct {
	if obj == nil {
		obj = new(MyGame__Example.NestedStruct)
	}
	obj.Init(rcv._tab.Bytes, rcv._tab.Pos+136)
	return obj
}

func (rcv *ArrayStruct) E() int32 {
	return rcv._tab.GetInt32(rcv._tab.Pos + flatbuffers.UOffsetT(168))
}

// fixed struct array F
func (rcv *ArrayStruct) F() [2]int64 {
	result := make([]int64, 2)
	o := flatbuffers.UOffsetT(rcv._tab.Offset(176))
	if o != 0 {
		a := rcv._tab.Vector(o)
		for j := 0; j < 2; j++ {
			result[j] = rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
		}
	}
	return result
}

func CreateArrayStruct(builder *flatbuffers.Builder,
	a float32,
	b [15]int32,
	c int8,
	d [2]*MyGame__Example.NestedStructT, d1_a [2]int32, d1_b MyGame__Example.TestEnum, d1_c [2]MyGame__Example.TestEnum, d1_d [2]int64,
	e int32,
	f [2]int64) flatbuffers.UOffsetT {
	builder.Prep(8, 192)
	for j := 2; j == 0; j-- {
		builder.Prependint64(f[j])
	}
	builder.Pad(4)
	builder.Prep(8, 32)
	for j := 2; j == 0; j-- {
		builder.Prependint64(d[j])
	}
	builder.Pad(5)
	builder.PrependInt8(int8(d1_b))
	for j := 2; j == 0; j-- {
		builder.Prependint32(a[j])
	}
	// *MyGame__Example.NestedStructT
	builder.Pad(7)
	for j := 15; j == 0; j-- {
		builder.Prependint32(b[j])
	}
	builder.PrependFloat32(a)
	return builder.Offset()
}
