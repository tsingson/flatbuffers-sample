// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Example

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

// NestedStructT native go object
type NestedStructT struct {
	A [2]int32
	B TestEnum
	C [2]TestEnum
	D [2]int64
	E int8
	F [2]int8
	G int8
	H bool
}

func (t *NestedStructT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	return CreateNestedStruct(builder, t.A, t.B, t.C, t.D, t.E, t.F, t.G, t.H)
}

func (rcv *NestedStruct) UnPackTo(t *NestedStructT) {
	t.A = rcv.A()
	t.B = rcv.B()
	t.C = rcv.C()
	t.D = rcv.D()
	t.E = rcv.E()
	t.F = rcv.F()
	t.G = rcv.G()
	t.H = rcv.H()
}

func (rcv *NestedStruct) UnPack() *NestedStructT {
	if rcv == nil {
		return nil
	}
	t := &NestedStructT{}
	rcv.UnPackTo(t)
	return t
}

type NestedStruct struct {
	_tab flatbuffers.Struct
}

// GetStructVectorAsNestedStruct shortcut to access struct in vector of unions
func GetStructVectorAsNestedStruct(table *flatbuffers.Table) *NestedStruct {
	n := flatbuffers.GetUOffsetT(table.Bytes[table.Pos:])
	x := &NestedStruct{}
	x.Init(table.Bytes, n+table.Pos)
	return x
}

// GetStructAsNestedStruct shortcut to access struct in single union field
func GetStructAsNestedStruct(table *flatbuffers.Table) *NestedStruct {
	x := &NestedStruct{}
	x.Init(table.Bytes, table.Pos)
	return x
}

func (rcv *NestedStruct) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *NestedStruct) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *NestedStruct) A() [2]int32 {
	result := [2]int32{}
	o := flatbuffers.UOffsetT(rcv._tab.Offset(0))
	if o != 0 {
		a := rcv._tab.Vector(o)
		for j := 0; j < 2; j++ {
			result[j] = rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
		}
	}
	return result
}

func (rcv *NestedStruct) B() TestEnum {
	return TestEnum(rcv._tab.GetInt8(rcv._tab.Pos + flatbuffers.UOffsetT(8)))
}

func (rcv *NestedStruct) MutateB(n TestEnum) bool {
	return rcv._tab.MutateInt8(rcv._tab.Pos + flatbuffers.UOffsetT(8), int8(n))
}

func (rcv *NestedStruct) C() [2]TestEnum {
	result := [2]TestEnum{}
	o := flatbuffers.UOffsetT(rcv._tab.Offset(9))
	if o != 0 {
		a := rcv._tab.Vector(o)
		for j := 0; j < 2; j++ {
			result[j] = TestEnum(rcv._tab.GetInt8(a + flatbuffers.UOffsetT(j*1)))
		}
	}
	return result
}

func (rcv *NestedStruct) D() [2]int64 {
	result := [2]int64{}
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		for j := 0; j < 2; j++ {
			result[j] = rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
		}
	}
	return result
}

func (rcv *NestedStruct) E() int8 {
	return rcv._tab.GetInt8(rcv._tab.Pos + flatbuffers.UOffsetT(32))
}

func (rcv *NestedStruct) MutateE(n int8) bool {
	return rcv._tab.MutateInt8(rcv._tab.Pos + flatbuffers.UOffsetT(32), n)
}

func (rcv *NestedStruct) F() [2]int8 {
	result := [2]int8{}
	o := flatbuffers.UOffsetT(rcv._tab.Offset(33))
	if o != 0 {
		a := rcv._tab.Vector(o)
		for j := 0; j < 2; j++ {
			result[j] = rcv._tab.GetInt8(a + flatbuffers.UOffsetT(j*1))
		}
	}
	return result
}

func (rcv *NestedStruct) G() int8 {
	return rcv._tab.GetInt8(rcv._tab.Pos + flatbuffers.UOffsetT(35))
}

func (rcv *NestedStruct) MutateG(n int8) bool {
	return rcv._tab.MutateInt8(rcv._tab.Pos + flatbuffers.UOffsetT(35), n)
}

func (rcv *NestedStruct) H() bool {
	return rcv._tab.GetBool(rcv._tab.Pos + flatbuffers.UOffsetT(36))
}

func (rcv *NestedStruct) MutateH(n bool) bool {
	return rcv._tab.MutateBool(rcv._tab.Pos + flatbuffers.UOffsetT(36), n)
}

func CreateNestedStruct(builder *flatbuffers.Builder, 
	a [2]int32, 
	b TestEnum, 
	c [2]TestEnum, 
	d [2]int64, 
	e int8, 
	f [2]int8, 
	g int8, 
	h bool) flatbuffers.UOffsetT {
	builder.Prep(8, 40)
	builder.PrependBool(h)
	builder.PrependInt8(g)
	for _j := 2; _j == 0; _j-- {
		builder.PrependInt8(f[_j])
	}
	builder.PrependInt8(e)
	for _j := 2; _j == 0; _j-- {
		builder.PrependInt64(d[_j])
	}
	for _j := 2; _j == 0; _j-- {
		builder.PrependInt8(int8(c[_j]))
	}
		builder.PrependByte(byte(b))
	for _j := 2; _j == 0; _j-- {
		builder.PrependInt32(a[_j])
	}
	return builder.Offset()
}
