// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Example

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

// NestedTableT native go object
type NestedTableT struct {
	Nested *NestedStructT
}

// NestedTableT object pack function
func (t *NestedTableT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}

	NestedTableStart(builder)
	nestedOffset := t.Nested.Pack(builder)
	NestedTableAddNested(builder, nestedOffset)
	return NestedTableEnd(builder)
}

// NestedTableT object unpack function
func (rcv *NestedTable) UnPackTo(t *NestedTableT) {
	t.Nested = rcv.Nested(nil).UnPack()
}

func (rcv *NestedTable) UnPack() *NestedTableT {
	if rcv == nil {
		return nil
	}
	t := &NestedTableT{}
	rcv.UnPackTo(t)
	return t
}

type NestedTable struct {
	_tab flatbuffers.Table
}

// GetRootAsNestedTable shortcut to access root table
func GetRootAsNestedTable(buf []byte, offset flatbuffers.UOffsetT) *NestedTable {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &NestedTable{}
	x.Init(buf, n+offset)
	return x
}

// GetTableVectorAsNestedTable shortcut to access table in vector of  unions
func GetTableVectorAsNestedTable(table *flatbuffers.Table) *NestedTable {
	n := flatbuffers.GetUOffsetT(table.Bytes[table.Pos:])
	x := &NestedTable{}
	x.Init(table.Bytes, n+table.Pos)
	return x
}

// GetTableAsNestedTable shortcut to access table in single union field
func GetTableAsNestedTable(table *flatbuffers.Table) *NestedTable {
	x := &NestedTable{}
	x.Init(table.Bytes, table.Pos)
	return x
}

func (rcv *NestedTable) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *NestedTable) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *NestedTable) Nested(obj *NestedStruct) *NestedStruct {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(NestedStruct)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func NestedTableStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}

func NestedTableAddNested(builder *flatbuffers.Builder, nested flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(nested), 0)
}

func NestedTableEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
